generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login    String @unique
  password String

  firstName String @map("first_name")
  lastName  String @map("last_name")

  phone String

  object Object?

  role Roles

  clothesHistory ClothesHistory[]

  toolsHistory         ToolHistory[]
  toolsStatusHistories ToolStatusHistory[]

  devicesHistory      DeviceHistory[]
  deviceStatusHistory DeviceStatusHistory[]

  tabletsHistory TabletHistory[]

  actionLogs ActionLog[]
}

enum Roles {
  OWNER
  MASTER
  ACCOUNTANT
  FOREMAN
}

model Object {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  address String

  foreman User?   @relation(fields: [userId], references: [id])
  userId  String? @unique @map("user_id")

  tools                Tool[]
  employees            Employee[]
  clothes              Clothes[]
  devices              Device[]
  fromClothesHistories ClothesHistory[] @relation("clothes_from_object_fk")
  toClothesHistories   ClothesHistory[] @relation("clothes_to_object_fk")

  fromToolHistories ToolHistory[] @relation("tool_from_object_fk")
  toToolHistories   ToolHistory[] @relation("tool_to_object_fk")

  fromDeviceHistories DeviceHistory[] @relation("device_from_object_fk")
  toDeviceHistories   DeviceHistory[] @relation("device_to_object_fk")

  @@unique([name, address], name: "object_name_address_unique")
}

model Tool {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String
  status       ToolStatus @default(ON_OBJECT)
  serialNumber String     @unique @map("serial_number")

  storage  Object @relation(fields: [objectId], references: [id])
  objectId String @map("object_id")

  history         ToolHistory[]
  statusHistories ToolStatusHistory[]
}

enum ToolStatus {
  ON_OBJECT
  IN_TRANSIT
  IN_REPAIR
  LOST
  WRITTEN_OFF
}

model ToolHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  toolId String @map("tool_id")

  movedBy User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")

  fromObject   Object @relation(fields: [fromObjectId], references: [id], name: "tool_from_object_fk")
  fromObjectId String

  toObject   Object @relation(fields: [toObjectId], references: [id], name: "tool_to_object_fk")
  toObjectId String
}

model ToolStatusHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")

  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  toolId String @map("tool_id")

  changedBy User   @relation(fields: [userId], references: [id])
  userId    String @map("user_id")

  fromStatus ToolStatus
  toStatus   ToolStatus

  comment String?
}

model Device {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String
  status       ToolStatus @default(ON_OBJECT)
  serialNumber String     @unique @map("serial_number")

  storage  Object @relation(fields: [objectId], references: [id])
  objectId String @map("object_id")

  history         DeviceHistory[]
  statusHistories DeviceStatusHistory[]
}

enum DeviceStatus {
  ON_OBJECT
  IN_TRANSIT
  IN_REPAIR
  LOST
  WRITTEN_OFF
}

model DeviceHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId String @map("device_id")

  movedBy User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")

  fromObject   Object @relation(fields: [fromObjectId], references: [id], name: "device_from_object_fk")
  fromObjectId String

  toObject   Object @relation(fields: [toObjectId], references: [id], name: "device_to_object_fk")
  toObjectId String
}

model DeviceStatusHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")

  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId String @map("device_id")

  changedBy User   @relation(fields: [userId], references: [id])
  userId    String @map("user_id")

  fromStatus ToolStatus
  toStatus   ToolStatus

  comment String?
}

model Clothes {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type   ClothesType
  season Season

  name      String
  size      Int
  price     Int
  quantity  Int
  inTransit Int    @default(0) @map("in_transit")

  storage  Object @relation(fields: [objectId], references: [id])
  objectId String @map("object_id")

  employeeClothes EmployeeClothing[]
  history         ClothesHistory[]

  @@unique([objectId, name, size, type, season], name: "objectId_name_size_type_season")
}

enum ClothesType {
  CLOTHING
  FOOTWEAR
}

enum Season {
  SUMMER
  WINTER
}

model ClothesHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  action ClothesActions

  clothes   Clothes @relation(fields: [clothesId], references: [id])
  clothesId String  @map("clothes_Id")

  movedBy User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")

  quantity Int

  fromObject   Object @relation(fields: [fromObjectId], references: [id], name: "clothes_from_object_fk")
  fromObjectId String

  toObject   Object @relation(fields: [toObjectId], references: [id], name: "clothes_to_object_fk")
  toObjectId String
}

enum ClothesActions {
  ADD
  TRANSFER
  WRITTEN_OFF
}

model Tablet {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String
  serialNumber String @unique @map("serial_number")

  status TabletStatus @default(ACTIVE)

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @map("employee_id")

  history TabletHistory[]
}

enum TabletStatus {
  ACTIVE
  INACTIVE
  IN_REPAIR
  LOST
  WRITTEN_OFF
}

model TabletHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")

  tablet   Tablet @relation(fields: [tabletId], references: [id], onDelete: Cascade)
  tabletId String @map("tablet_id")

  changedBy User   @relation(fields: [userId], references: [id])
  userId    String @map("user_id")

  fromStatus TabletStatus?
  toStatus   TabletStatus?

  fromEmployee   Employee? @relation(fields: [fromEmployeeId], references: [id], name: "tablet_from_employee_fk")
  fromEmployeeId String?

  toEmployee   Employee? @relation(fields: [toEmployeeId], references: [id], name: "tablet_to_employee_fk")
  toEmployeeId String?

  comment String?
}

model Employee {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  fatherName   String? @map("father_name")
  phoneNumber  String  @map("phone_number")
  clothingSize Int?    @map("clothing_size")
  footwearSize Int?    @map("footwear_size")

  status Statuses @default(OK)

  position Position

  clothing EmployeeClothing[]
  devices  Tablet[]
  skills   Skill[]

  workPlace Object? @relation(fields: [objectId], references: [id])
  objectId  String? @map("object_id")

  fromTabletHistories TabletHistory[] @relation("tablet_from_employee_fk")
  toTabletHistories   TabletHistory[] @relation("tablet_to_employee_fk")

  @@unique([firstName, lastName, phoneNumber], name: "employee_identity_unique")
}

enum Statuses {
  OK // üü¢ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
  WARNING // üü° –ï—Å—Ç—å –º–æ–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç)
  OVERDUE // üî¥ –ù–∞—Ä—É—à–µ–Ω—ã —Å—Ä–æ–∫–∏ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —á—Ç–æ-—Ç–æ)
}

enum Position {
  FOREMAN //–±—Ä–∏–≥–∞–¥–∏—Ä
  ELECTRICAN //—ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫
  LABORER //—Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π
  DESIGNER // –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫
  ENGINEER // –∏–Ω–∂–µ–Ω–µ—Ä
}

model Skill {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  skill String @unique

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @map("employee_id")
}

model EmployeeClothing {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @map("employee_id")

  clothing   Clothes @relation(fields: [clothingId], references: [id])
  clothingId String  @map("clothing_id")

  issuedAt        DateTime @default(now()) @map("issued_at")
  priceWhenIssued Int      @map("price_when_issued")
  debtAmount      Int      @map("debt_amount ")
  isReturned      Boolean  @default(false) @map("is_returned ")

  payments EmployeeClothingPayment[]
}

model EmployeeClothingPayment {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  amount    Int
  shiftId   String?
  notes     String?

  employeeClothing   EmployeeClothing @relation(fields: [employeeClothingId], references: [id])
  employeeClothingId String           @map("employee_clothing_id")
}

model ActionLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  action   String
  entity   String
  entityId String @map("entity_id")

  details Json? // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}
