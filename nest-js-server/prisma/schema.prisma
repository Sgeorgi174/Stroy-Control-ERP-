generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  login    String @unique
  password String

  firstName String @map("first_name")
  lastName  String @map("last_name")

  phone String

  object Object?

  role Roles

  clothesHistory ClothesHistory[]
  toolsHistory   ToolHistory[]
  actionLogs     ActionLog[]
}

enum Roles {
  OWNER
  MASTER
  ACCOUNTANT
  FOREMAN
}

model Object {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  address String

  foreman User?   @relation(fields: [userId], references: [id])
  userId  String? @unique @map("user_id")

  tools     Tool[]
  employees Employee[]
  clothes   Clothes[]

  fromClothesHistories ClothesHistory[] @relation("clothes_from_object_fk")
  toClothesHistories   ClothesHistory[] @relation("clothes_to_object_fk")

  fromToolHistories ToolHistory[] @relation("tool_from_object_fk")
  toToolHistories   ToolHistory[] @relation("tool_to_object_fk")

  @@unique([name, address], name: "object_name_address_unique")
}

model Tool {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String
  status       ToolStatus @default(ON_OBJECT)
  serialNumber String     @unique @map("serial_number")

  storage  Object @relation(fields: [objectId], references: [id])
  objectId String @map("object_id")

  history ToolHistory[]
}

enum ToolStatus {
  ON_OBJECT
  IN_TRANSIT
}

model ToolHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tool   Tool   @relation(fields: [toolId], references: [id])
  toolId String @map("tool_id")

  movedBy User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")

  fromObject   Object @relation(fields: [fromObjectId], references: [id], name: "tool_from_object_fk")
  fromObjectId String

  toObject   Object @relation(fields: [toObjectId], references: [id], name: "tool_to_object_fk")
  toObjectId String
}

model Clothes {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type   ClothesType
  season Season

  name      String
  size      Int
  price     Int
  quantity  Int
  inTransit Int    @map("in_transit")

  storage  Object @relation(fields: [objectId], references: [id])
  objectId String @map("object_id")

  employeeClothes EmployeeClothing[]
  history         ClothesHistory[]

  @@unique([objectId, name, size, type, season], name: "objectId_name_size_type_season")
}

enum ClothesType {
  CLOTHING
  FOOTWEAR
}

enum Season {
  SUMMER
  WINTER
}

model ClothesHistory {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clothes   Clothes @relation(fields: [clothesId], references: [id])
  clothesId String  @map("clothes_Id")

  movedBy User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")

  quantity Int

  fromObject   Object @relation(fields: [fromObjectId], references: [id], name: "clothes_from_object_fk")
  fromObjectId String

  toObject   Object @relation(fields: [toObjectId], references: [id], name: "clothes_to_object_fk")
  toObjectId String
}

model Employee {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  firstName  String  @map("first_name")
  lastName   String  @map("last_name")
  fatherName String? @map("father_name")

  phoneNumber  String   @map("phone_number")
  clothingSize Int      @map("clothing_size")
  footwearSize Int      @map("footwear_size")
  position     Position

  clothing EmployeeClothing[]

  workPlace Object? @relation(fields: [objectId], references: [id])
  objectId  String? @map("object_id")

  @@unique([firstName, lastName, phoneNumber], name: "employee_identity_unique")
}

enum Position {
  FOREMAN
  ELECTRICAN
  LABORER
}

model EmployeeClothing {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @map("employee_id")

  clothing   Clothes @relation(fields: [clothingId], references: [id])
  clothingId String  @map("clothing_id")

  issuedAt        DateTime @default(now()) @map("issued_at")
  priceWhenIssued Int      @map("price_when_issued")
  debtAmount      Int      @map("debt_amount ")
  isReturned      Boolean  @default(false) @map("is_returned ")

  payments EmployeeClothingPayment[]
}

model EmployeeClothingPayment {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  amount    Int
  shiftId   String?
  notes     String?

  employeeClothing   EmployeeClothing @relation(fields: [employeeClothingId], references: [id])
  employeeClothingId String           @map("employee_clothing_id")
}

model ActionLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  action   String
  entity   String
  entityId String @map("entity_id")

  details Json? // Дополнительные данные
}
