import { TelegramBotService } from './telegram-bot.service';
import { InjectBot, Start, Update, On, Ctx } from 'nestjs-telegraf';
import { PrismaService } from 'src/prisma/prisma.service';
import { Context, Telegraf } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';

@Update()
export class TelegramBotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly telegramBotService: TelegramBotService,
    private readonly prismaService: PrismaService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply(
      'üì± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä.',
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                request_contact: true,
              },
            ],
          ],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      },
    );
  }

  @On('contact')
  async onContact(@Ctx() ctx: Context) {
    const message = ctx.message as Message.ContactMessage;

    const contact = message.contact;
    const chatId = Number(ctx.chat?.id); // ID —á–∞—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    if (!contact?.phone_number || !chatId) {
      return await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }

    let phone = contact.phone_number;

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+', –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!phone.startsWith('+')) {
      phone = '+' + phone;
    }

    const user = await this.prismaService.user.findUnique({ where: { phone } });

    if (!user) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É ‚ö†Ô∏è');
    } else {
      await this.prismaService.telegramUser.upsert({
        where: { chatId },
        update: { phone },
        create: {
          chatId,
          phone,
        },
      });

      await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${user.firstName}! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ`);
    }
  }
}
